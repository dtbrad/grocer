$('#graph_error_explanation').html("")

var graph_change = '<%= (params[:graph_change]).to_s %>'
var graph_valid = '<%= @graph_config.valid?.to_s %>'

if (graph_change === 'yes' && graph_valid == 'true' ) {

  var graph_unit = '<%= @graph_config.unit %>'
  var graph_array = '<%= @my_user.baskets.group_baskets(@graph_config).to_json %>'
  $("#outerchart").html('<div id="basket-spending-chart" data-param1= "<%= @my_user.baskets.group_baskets(@graph_config).to_json %>" data-param2= "<%= @graph_config.unit %>" data-param3="<%= ENV['WEB_FULL_URL'] %>"></div>')
  $('#baskets_table').html("<%= escape_javascript render partial: 'baskets', locals: { baskets: @baskets } %>");
  $('#paginator').html('<%= escape_javascript(paginate @baskets, theme: "twitter-bootstrap-3", params: {start: @graph_config.start_date, end: @graph_config.end_date, unit: @graph_config.unit, graph_change: "no"}, remote: true) %>');

  var $chartData = $("#basket-spending-chart")
	var formatted_array = $chartData.data('param1').map(function(x) {
		return [Date.parse(x[0]), (x[1] / 100)]
	})
	var unit = $chartData.data('param2');
	var for_graph = right_date(unit);
  var url = $chartData.data('param3')

	function right_date(unit) {
		if (unit == 'month') {
		 return '%b %Y'
		}
		else if (unit == 'week') {
			return 'week of %b %e, %Y'
		}
		else {
			return '%b %e, %Y'
		}
	}

	Highcharts.chart('basket-spending-chart', {

			chart: { renderTo: 'basket-spending-chart', type: 'spline' },
			title: {
					text: 'Spending History'
			},
			yAxis: {
				title: {
						text: 'Amount Spent'
				},
				labels: {
				format: '${value}'
				}
			},
			xAxis: {
			 type: 'datetime',
			 title: {
					 text: 'Date'
			 }
			},
			series: [{
					name: 'spending',
					data: formatted_array
			}],
			tooltip: {
									formatter: function() {
															return Highcharts.dateFormat(for_graph, new Date(this.x)) + ' - $'  + (this.y)
														 }
							},
			plotOptions: {
				series: {
					cursor: 'pointer',
					events: { click:  function (event) {
						if (unit === "week" || unit === "month" ) {
							var date = new Date(event.point.x).toString()
							var new_unit = unit === "month" ? "week" : "day"
							$.ajax({
                url: url + '/baskets',
								jsonp: 'refreshSection',
								dataType: "jsonp",
								data: { "graph_change": "yes", "tooltip_date": date, "tooltip_unit": new_unit, "graph_change": "yes" }
							});
										}
                  },
                  legendItemClick: function () {
                    return false
                }
									}
								}
							},
				credits: {
			enabled: false
			},
	});

  $('#textfield_id').attr('readOnly', 'true');
  $('.datepicker').datepicker({
    format: 'yyyy-mm-dd',
    endDate: '-0d'
  });

  $('#import_baskets_date_submit').click(function(r) {
    var date = $('#import_baskets_date_id').val();
    if (date === '') {
      r.preventDefault();
      $('.new-basket-error').show();
      setTimeout(function() {
        $('.new-basket-error').hide();
      }, 5000);
    }
  });
}
else if (graph_change === 'yes' && graph_valid == 'false') {
  $('#graph_error_explanation').append('<div class="col-xs-3" style="padding-right: 5px;"><%= @graph_config.errors.details[:start_date][0][:error] if @graph_config.errors.details[:start_date][0] %></div><div class="col-xs-3"  style="padding-right: 5px;"></div><div class="col-xs-3"  style="padding-right: 5px;"><%= @graph_config.errors.details[:unit][0][:error] if @graph_config.errors.details[:unit][0] %></div>')
}
else {
  $('#baskets_table').html("<%= escape_javascript render partial: 'baskets', locals: { baskets: @baskets } %>");
  $('#paginator').html('<%= escape_javascript(paginate(@baskets, theme: "twitter-bootstrap-3", :remote => true).to_s) %>');
};
