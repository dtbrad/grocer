$('#graph_error_explanation').html("")
var graph_change = '<%= params[:graph_change].to_s %>'
var graph_valid = '<%= @graph_config.valid?.to_s %>'

if (graph_change === 'yes' && graph_valid == 'true' ) {
  $("#product-outer-chart").html('<div id="product-history-chart" data-param1= "<%= @my_user.line_items.where(product: @product).group_line_items(@graph_config).to_json %>" data-param2="<%= @graph_config.unit %>" data-param3="<%= @product.id %>" data-param4="<%= ENV['WEB_FULL_URL'] %>"></div>')
  $('#line_items_table').html("<%= escape_javascript render partial: 'line_items', locals: { line_items: @line_items } %>");
  $('#paginator').html('<%= escape_javascript(paginate(@line_items, theme: "twitter-bootstrap-3", :remote => true).to_s) %>');

  var $chartData = $("#product-history-chart")
  if($chartData.data('param1') != undefined) {
  var formatted_array = $chartData.data('param1').map(function(x) {
    return [Date.parse(x[0]), x[1]]
  })

  var unit = $chartData.data('param2');
  var for_graph = right_date(unit);
  var product_id = $chartData.data('param3');
  var url = $chartData.data('param4');

  function right_date(unit) {
    if (unit == 'month') {
     return '%b %Y'
    }
    else if (unit == 'week') {
      return 'week of %b %e, %Y'
    }
    else {
      return '%b %e, %Y'
    }
  }

  Highcharts.chart('product-history-chart', {

      chart: { renderTo: 'products-spending-chart', type: 'spline' },
      title: {
          text: ''
      },
      yAxis: {
        allowDecimals: false,
        title: {
            text: 'Qty'
        }
      },
      xAxis: {
       type: 'datetime',
       title: {
           text: 'Date'
       }
      },
      series: [{
          name: 'Total Purchased',
          data: formatted_array
      }],
      tooltip: {
                  formatter: function() {
                    return Highcharts.dateFormat(for_graph, new Date(this.x)) + ' - purchased '  + this.y + ' ' +(this.y > 1 ? 'times' : 'time')
                             }
              },
      plotOptions: {
        series: {
          cursor: 'pointer',
          events: { click:  function (event) {
            if (unit === "week" || unit === "month" ) {

              var date = new Date(event.point.x).toString()
              var new_unit = unit === "month" ? "week" : "day"


              $.ajax({
                url: url + '/products/' + product_id,
                jsonp: 'refreshSection',
                dataType: "jsonp",
                data: { "graph_change": "yes", "tooltip_date": date, "tooltip_unit": new_unit, "graph_change": "yes" }
              });
                    }
                  },
                  legendItemClick: function () {
                    return false
                }
                  }
                }
              },
        credits: {
      enabled: false
      },
    });
  }
  $('#textfield_id').attr('readOnly', 'true');
  $('.datepicker').datepicker({
    format: 'yyyy-mm-dd',
    endDate: '-0d'
  });

  $('#import_baskets_date_submit').click(function(r) {
    var date = $('#import_baskets_date_id').val();
    if (date === '') {
      r.preventDefault();
      $('.new-basket-error').show();
      setTimeout(function() {
        $('.new-basket-error').hide();
      }, 5000);
    }
  });

}


else if (graph_change === 'yes' && graph_valid == 'false') {
  $('#graph_error_explanation').append('<div class="col-xs-3" style="padding-right: 5px;"><%= @graph_config.errors.details[:start_date][0][:error] if @graph_config.errors.details[:start_date][0] %></div><div class="col-xs-3"  style="padding-right: 5px;"></div><div class="col-xs-3"  style="padding-right: 5px;"><%= @graph_config.errors.details[:unit][0][:error] if @graph_config.errors.details[:unit][0] %></div>')
}

else {
  $('#line_items_table').html("<%= escape_javascript render partial: 'line_items', locals: { line_items: @line_items } %>");
  $('#paginator').html('<%= escape_javascript(paginate(@line_items, theme: "twitter-bootstrap-3", :remote => true).to_s) %>');
};
